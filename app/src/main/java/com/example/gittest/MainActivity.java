package com.example.gittest;

import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;


public class MainActivity extends AppCompatActivity {
    static ArrayList<BigInteger> arrBigInt= new ArrayList<>();
    //static ArrayList<BigInteger> arrBigInt2= new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //addMass(6, 1503);
        addMass(5, 2500);
        //addMass(6, 2000);
       Collections.sort(arrBigInt);

        System.out.println("привет");
    }




    public void addMass(int n, int size){
        BigInteger koef = new BigInteger("10");
        BigInteger sum;
        String strMult;
        arrBigInt.add(BigInteger.valueOf(n-5));
        arrBigInt.add(BigInteger.valueOf(n));
        int l1, l2;
        sum = arrBigInt.get(arrBigInt.size()-1).add(koef);
        while (arrBigInt.size()<=size) {
            strMult = sum.multiply(sum).toString();
            l1 = sum.toString().length();//длина бига
            l2 = strMult.length();//длина бига произведения
            strMult = strMult.substring(l2 - l1);
            if (strMult.equals(sum.toString())) {
                arrBigInt.add(sum);
                if(n==5){
                    if(arrBigInt.size()==505){
                        koef=koef.multiply(BigInteger.valueOf(10000));
                        sum = sum.add(koef);
                        continue;
                    }
                    if(arrBigInt.size()==2297){
                        koef=koef.multiply(BigInteger.valueOf(100000));
                        sum = sum.add(koef);
                        continue;
                    }
                    if(arrBigInt.size()==667||arrBigInt.size()==882||arrBigInt.size()==887
                    ||arrBigInt.size()==1113||arrBigInt.size()==1143||arrBigInt.size()==1226
                    ||arrBigInt.size()==1306||arrBigInt.size()==1345||arrBigInt.size()==1498
                    ||arrBigInt.size()==1708||arrBigInt.size()==1739||arrBigInt.size()==1908
                    ||arrBigInt.size()==2025||arrBigInt.size()==2123||arrBigInt.size()==2160
                    ||arrBigInt.size()==2361||arrBigInt.size()==2365){
                        koef=koef.multiply(BigInteger.valueOf(1000));
                        sum = sum.add(koef);
                        continue;
                    }
                }
                //if(n==6){
                    //тут дописать
                //}
                koef = koef.multiply(BigInteger.TEN.pow(l1-koef.toString().length()+1));
                sum = sum.add(koef);
            }else {
                sum = sum.add(koef);
            }
        }
    }
}
//5 2500
